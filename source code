import java.util.*;

public class MovieRecommendationSystem {
    // Example user-item matrix (can be replaced with actual data)
    private static int[][] userItemMatrix = {
            {4, 5, 0, 3, 0},
            {5, 4, 4, 0, 0},
            {0, 0, 5, 4, 3},
            {3, 0, 0, 4, 4},
            {0, 0, 3, 5, 5}
    };

    public static void main(String[] args) {
        // User to find recommendations for
        int userId = 0;

        // Calculate recommendations for the given user
        List<Integer> recommendations = getRecommendations(userId);

        // Display recommendations
        System.out.println("Recommendations for User " + userId + ":");
        for (int movieId : recommendations) {
            System.out.println("Movie ID: " + movieId);
            // Here, you could retrieve movie details from a database or dataset
        }
    }

    // Collaborative filtering recommendation method
    private static List<Integer> getRecommendations(int userId) {
        Map<Integer, Double> movieScores = new HashMap<>();
        for (int i = 0; i < userItemMatrix[0].length; i++) {
            if (userItemMatrix[userId][i] == 0) { // User hasn't rated this movie
                double score = predictRating(userId, i);
                movieScores.put(i, score);
            }
        }

        // Sort movies based on predicted scores
        List<Map.Entry<Integer, Double>> sortedMovies = new ArrayList<>(movieScores.entrySet());
        sortedMovies.sort((m1, m2) -> m2.getValue().compareTo(m1.getValue()));

        // Get movie recommendations
        List<Integer> recommendations = new ArrayList<>();
        for (Map.Entry<Integer, Double> entry : sortedMovies) {
            recommendations.add(entry.getKey());
        }
        return recommendations;
    }

    // Simple collaborative filtering - Predict rating for a movie for a user
    private static double predictRating(int userId, int movieId) {
        double sum = 0.0;
        int count = 0;
        for (int i = 0; i < userItemMatrix.length; i++) {
            if (i != userId && userItemMatrix[i][movieId] != 0) {
                sum += userItemMatrix[i][movieId];
                count++;
            }
        }
        return (count == 0) ? 0 : sum / count;
    }
}
